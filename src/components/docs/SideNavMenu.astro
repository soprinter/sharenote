---
import { capitalizeFirstLetter } from "@/lib/utils";
import type { SideNavMenuProps } from "@/lib/types";

const { items, level } = Astro.props as SideNavMenuProps;
const pathname: string = new URL(Astro.request.url).pathname;

// To pass the tailwindcss classes to the astro component
const { class: className } = Astro.props;
---

<ul class:list={["list-none m-0 space-y-1", level > 0 ? "ml-4" : "", className]}>
  {
    items
      .filter((item) => !item.draft)
      .map((item) => {
        const label = item.title
          ? capitalizeFirstLetter(item.title)
          : capitalizeFirstLetter(item.slug.split("/").pop() || "");
        const href = '/' + item.slug;
        const isActiveExact = pathname === href;
        const isActiveBranch = isActiveExact || pathname.startsWith(href + '/');
        const baseTone = level === 0 ? 'font-semibold' : 'text-muted-foreground';
        const baseBox = 'block w-full px-2 py-2 rounded-lg';
        // Links: hover background allowed; Non-links: no hover
        const linkClass = [
          baseTone,
          baseBox,
          'no-underline transition-colors',
          isActiveExact ? 'text-primary bg-[var(--hover-bg)]' : 'hover:bg-[var(--hover-bg)]',
        ].join(' ');
        const spanClass = [
          baseTone,
          baseBox,
          isActiveBranch ? 'bg-[var(--hover-bg)] text-foreground' : '',
        ].join(' ');
        const linkable = Boolean(item.hasPage);
        return (
          <li class="w-full">
            {linkable ? (
              <a
                href={href}
                class={`${linkClass} text-sm leading-none`}
                aria-current={isActiveExact ? 'page' : undefined}
              >
                {label}
              </a>
            ) : (
              <span class={`${spanClass} text-sm leading-none`}>{label}</span>
            )}
            {item.children.length > 0 && (
              <Astro.self items={item.children} level={level + 1} />
            )}
          </li>
        );
      })
  }
</ul>
