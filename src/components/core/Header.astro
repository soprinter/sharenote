---
import HamNavMenu from "@/components/core/HamNavMenu.astro";
import NavMenu from "@/components/core/NavMenu.astro";

import { Button } from "@/components/ui/button";

import { docconfig, SITE } from "@/config";
import { menu as docsMenu } from "@/lib/content";
import { Search } from "@/components/core/Search";

// To pass the tailwindcss classes to the astro component
const { class: className } = Astro.props;
---

<header
  class:list={["py-4 px-6 md:px-16 lg:px-48 w-full", className]}
>
  <div
    class="flex space-x-4 justify-between items-center md:items-center md:space-x-0 md:max-w-8xl"
  >
    <div class="font-bold flex flex-row items-center">
      <a href="/" class="px-4 hidden md:flex no-underline header-logo-link">
        <Button
          client:load
          className="flex items-center gap-3 hover:no-underline hover:bg-transparent hover:text-inherit text-2xl"
          variant="ghost"
        >
          <span class="logo-wrap relative inline-flex items-center justify-center">
            <img src="/guilloche-rosette.svg" alt="" aria-hidden="true" class="rosette-overlay" />
            <img src="/logo.png" src="/logo.png" srcset="/optimized/logo-w320.png 320w, /optimized/logo-w480.png 480w, /optimized/logo-w640.png 640w" alt="Sharenote home" class="h-8 w-auto block relative z-[1]" />
          </span>
        </Button>
      </a>
      <a href="/" class="px-4 flex md:hidden header-logo-link">
        <Button
          client:load
          className="flex items-center gap-3 hover:no-underline hover:bg-transparent hover:text-inherit text-2xl"
          variant="ghost"
        >
          <span class="logo-wrap relative inline-flex items-center justify-center">
            <img src="/guilloche-rosette.svg" alt="" aria-hidden="true" class="rosette-overlay" />
            <img src="/logo.png" alt="Sharenote home" class="h-8 w-auto block relative z-[1]" />
          </span>
        </Button>
      </a>
      <div class="hidden md:block">
        <NavMenu />
      </div>
    </div>

    <div class="flex flex-row gap-2 md:px-8 items-center">
      <!-- <button id="cmdk-button" class="btn-icon" aria-label="Search (Cmd/Ctrl+K)">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
      </button> -->
      <!-- <Search client:only="react" /> -->

      {!docconfig.hide_repo_button && (
        <a
          href={SITE.repo}
          target="_blank"
          class="btn-icon hover:no-underline"
          aria-label="GitHub"
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="currentColor" aria-hidden="true">
            <path d="M12 .5A11.5 11.5 0 0 0 .5 12.3c0 5.25 3.41 9.7 8.15 11.28.6.12.82-.27.82-.59 0-.29-.01-1.07-.02-2.1-3.32.73-4.02-1.64-4.02-1.64-.55-1.43-1.34-1.81-1.34-1.81-1.09-.77.08-.75.08-.75 1.2.09 1.83 1.26 1.83 1.26 1.07 1.86 2.8 1.32 3.49 1.01.11-.79.42-1.32 .76-1.63-2.65-.31-5.44-1.36-5.44-6.05 0-1.34.47-2.44 1.25-3.3-.13-.31-.54-1.56.12-3.26 0 0 1.01-.33 3.3 1.26.96-.27 1.99-.4 3.02-.4s2.06.14 3.02.4c2.29-1.59 3.3-1.26 3.3-1.26.67 1.7.25 2.95.12 3.26.78.86 1.25 1.96 1.25 3.3 0 4.71-2.8 5.74-5.46 6.04.44.38.82 1.12.82 2.25 0 1.62-.01 2.93-.01 3.33 0 .32.21.72.83.59 4.74-1.58 8.14-6.03 8.14-11.28A11.5 11.5 0 0 0 12 .5Z"/>
          </svg>
        </a>
      )}

      <button id="theme-toggle" class="btn-icon" aria-label="Toggle color theme" aria-pressed="false">
        <svg id="sun" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><circle cx="12" cy="12" r="4"/><path d="M12 2v2m0 16v2m10-10h-2M4 12H2m15.364-7.364-1.414 1.414M7.05 16.95l-1.414 1.414m0-11.314L7.05 7.05m10.9 10.9 1.414 1.414"/></svg>
        <svg id="moon" class="hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M21 12.79A9 9 0 1 1 11.21 3a7 7 0 0 0 9.79 9.79Z"/></svg>
      </button>

      <!-- <div class="md:hidden flex flex-row-reverse gap-4">
        <HamNavMenu />
      </div> -->
    </div>
  </div>
</header>

<!-- Search overlay -->
<div id="search-overlay" class="fixed inset-0 hidden flex items-start justify-center bg-black/40 backdrop-blur-sm p-4 z-50">
  <div class="w-full max-w-xl rounded-lg bg-[var(--bg)] text-[var(--ink)] shadow-xl">
    <div class="flex items-center gap-2 p-3">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.3-4.3"/></svg>
      <input id="search-input" class="w-full bg-transparent outline-none text-base" type="text" placeholder="Search docs..." aria-label="Search docs" />
      <kbd class="text-xs text-[var(--ink-muted)]">Esc</kbd>
    </div>
    <ul id="search-results" class="max-h-80 overflow-auto m-6 mt-0 p-0"></ul>
  </div>
</div>

<script is:inline>
  function setDarkMode(document) {
    const getThemePreference = () => {
      try {
        const v = localStorage.getItem('theme');
        if (v === 'dark' || v === 'light') return v;
      } catch {}
      // Default to light; do not follow system preference
      return 'light';
    };
    const isDark = getThemePreference() === 'dark';
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  setDarkMode(document);

  document.addEventListener("astro:before-swap", (ev) => {
    setDarkMode(ev.newDocument);
  });

  // Theme toggle and search: init on load and after navigation
  (function () {
    function initTheme() {
      const btn = document.getElementById('theme-toggle');
      const sun = document.getElementById('sun');
      const moon = document.getElementById('moon');
      function refreshIcon(doc) {
        const isDark = doc.documentElement.classList.contains('dark');
        if (sun && moon) {
          sun.classList.toggle('hidden', isDark);
          moon.classList.toggle('hidden', !isDark);
        }
        if (btn) btn.setAttribute('aria-pressed', String(isDark));
      }
      function toggle(doc) {
        const isDark = doc.documentElement.classList.toggle('dark');
        try { localStorage.setItem('theme', isDark ? 'dark' : 'light'); } catch {}
        refreshIcon(doc);
      }
      if (btn && !btn.hasAttribute('data-bound')) {
        btn.addEventListener('click', () => toggle(document));
        btn.setAttribute('data-bound', 'true');
      }
      refreshIcon(document);
    }
    initTheme();
    document.addEventListener('astro:page-load', initTheme);
  })();
</script>

<script define:vars={{ docsNav: docsMenu }}>
  (function () {
    const index = [];
    function flatten(items) {
      for (const it of items) {
        if (!it) continue;
        if (it.children && it.children.length) flatten(it.children);
        if (!it.children || it.children.length === 0) {
          if (!it.draft && it.slug) index.push({ label: it.title, href: '/' + it.slug });
        }
      }
    }
    try { flatten(docsNav || []); } catch {}

    function initSearch() {
      const overlay = document.getElementById('search-overlay');
      const input = document.getElementById('search-input');
      const results = document.getElementById('search-results');
      const openBtn = document.getElementById('cmdk-button');

      function open() {
        if (!overlay) return;
        overlay.classList.remove('hidden');
        requestAnimationFrame(() => input && input.focus());
        render('');
      }
      function close() {
        overlay && overlay.classList.add('hidden');
        if (input) input.value = '';
        if (results) results.innerHTML = '';
      }
      function render(q) {
        if (!results) return;
        const query = (q || '').toLowerCase().trim();
        const items = index.filter(({ label, href }) =>
          !query || (label && label.toLowerCase().includes(query)) || (href && href.toLowerCase().includes(query))
        ).slice(0, 50);
        results.innerHTML = '';
        for (const { label, href } of items) {
          const li = document.createElement('li');
          const a = document.createElement('a');
          a.href = href;
          a.className = 'result-item';
          a.textContent = label || href;
          li.className = 'mt-1';
          li.appendChild(a);
          results.appendChild(li);
        }
        if (items.length === 0) {
          const li = document.createElement('li');
          li.className = 'px-3 py-2 text-[var(--ink-muted)]';
          li.textContent = 'No results';
          results.appendChild(li);
        }
      }

      if (openBtn && !openBtn.hasAttribute('data-bound')) {
        openBtn.addEventListener('click', open);
        openBtn.setAttribute('data-bound', 'true');
      }
      document.addEventListener('keydown', (e) => {
        if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {
          e.preventDefault(); open();
        } else if (e.key === 'Escape') {
          close();
        }
      });
      overlay?.addEventListener('click', (e) => { if (e.target === overlay) close(); });
      input?.addEventListener('input', () => render(input.value));
    }

    initSearch();
    document.addEventListener('astro:page-load', initSearch);
  })();
</script>

<style>
  .logo-wrap { --logo-h: 2rem; display: inline-grid; place-items: center; }
  .logo-wrap img[alt="Logo"] { height: var(--logo-h); width: auto; }
  .logo-wrap .rosette-overlay {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    /* Keep overlay size proportional to base logo height */
    width: calc(var(--logo-h) * 4.5);
    height: calc(var(--logo-h) * 4.5);
    pointer-events: none;
    z-index: 0;
    opacity: 0.9;
  }
  /* Remove hover effects from the logo links/buttons */
  .header-logo-link:hover { text-decoration: none; }
  .header-logo-link:hover, .header-logo-link:focus { color: inherit; background: transparent; }
</style>
